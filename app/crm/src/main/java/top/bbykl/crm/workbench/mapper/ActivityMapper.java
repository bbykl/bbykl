package top.bbykl.crm.workbench.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;
import top.bbykl.crm.workbench.model.Activity;

import java.util.List;
import java.util.Map;

@Mapper
@Repository("activityMapper")
public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Nov 19 00:30:10 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Nov 19 00:30:10 CST 2022
     */


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Nov 19 00:30:10 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Nov 19 00:30:10 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Nov 19 00:30:10 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Nov 19 00:30:10 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     *  新增一个市场活动
     * @param: activity
     * @return:
     */
    int insert(Activity activity);

    /**
     *  分页查询市场活动列表，map元素分别为四个查询条件，当前页号，页面尺寸
     * @param: map
     * @return:
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     *  查询市场列表个数，参数和前一个公用，同一个controller调用
     * @param: map
     * @return:
     */
    int selectAllActivityCounts(Map<String,Object> map);

    /**
     * 删除市场活动，参数为id数组
     * @param: ids
     * @return:
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 查询一条市场活动通过市场活动id
     * @param: id
     * @return:
     */
    Activity selectActivityById(String id);

    /**
     * 修改市场活动信息
     * @param: id
     * @return:
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动（用于导出市场活动列表）
     * @param:
     * @return:
     */
    List<Activity> selectAllActivity();

    /**
     *参数为id组成的数组，用于查出前端选择的市场活动列表
     * @param: String[] id
     * @return:
     */
    List<Activity> selectAllActivityByIds(String[] id);

    /**
     *通过导入的xls文件插入市场活动
     * @param:  市场活动列表
     * @return: 修改影响行数
     */
    int insertAcyivitys(List<Activity> activityList);
}